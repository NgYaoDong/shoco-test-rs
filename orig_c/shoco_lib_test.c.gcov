        -:    0:Source:shoco_lib_test.c
        -:    0:Graph:shoco_lib_test.gcno
        -:    0:Data:shoco_lib_test.gcda
        -:    0:Runs:1
        -:    1:#include "stdint.h"
        -:    2:#include "stdio.h"
        -:    3:#include "assert.h"
        -:    4:#include "string.h"
        -:    5:
        -:    6:///// shoco BEGIN
        -:    7:#include <stddef.h>
        -:    8:
        -:    9:#if defined(_MSC_VER)
        -:   10:#define shoco_restrict __restrict
        -:   11:#elif __GNUC__
        -:   12:#define shoco_restrict __restrict__
        -:   13:#else
        -:   14:#define shoco_restrict restrict
        -:   15:#endif
        -:   16:
        -:   17:size_t shoco_compress(const char * const shoco_restrict in, size_t len, char * const shoco_restrict out, size_t bufsize);
        -:   18:size_t shoco_decompress(const char * const shoco_restrict in, size_t len, char * const shoco_restrict out, size_t bufsize);
        -:   19:
        -:   20:#include <stdint.h>
        -:   21:
        -:   22:#if (defined (__BYTE_ORDER__) && (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__) || __BIG_ENDIAN__)
        -:   23:  #define swap(x) (x)
        -:   24:#else
        -:   25:  #if defined(_MSC_VER)
        -:   26:    #include <stdlib.h>
        -:   27:    #define swap(x) _byteswap_ulong(x)
        -:   28:  #elif defined (__GNUC__)
        -:   29:    #if defined(__builtin_bswap32)
        -:   30:      #define swap(x) __builtin_bswap32(x)
        -:   31:    #else
        -:   32:      #define swap(x) ((x<<24) + ((x&0x0000FF00)<<8) + ((x&0x00FF0000)>>8) + (x>>24))
        -:   33:    #endif
        -:   34:  #else
        -:   35:    #include <byteswap.h>
        -:   36:    #define swap(x) bswap_32(x)
        -:   37:  #endif
        -:   38:#endif
        -:   39:
        -:   40:#if defined(_MSC_VER)
        -:   41:  #define _ALIGNED __declspec(align(16))
        -:   42:  #define inline __inline
        -:   43:#elif defined(__GNUC__)
        -:   44:  #define _ALIGNED __attribute__ ((aligned(16)))
        -:   45:#else
        -:   46:  #define _ALIGNED
        -:   47:#endif
        -:   48:
        -:   49:#define MIN_CHR 39
        -:   50:#define MAX_CHR 122
        -:   51:
        -:   52:static const char chrs_by_chr_id[32] = {
        -:   53:  'e', 'a', 'i', 'o', 't', 'h', 'n', 'r', 's', 'l', 'u', 'c', 'w', 'm', 'd', 'b', 'p', 'f', 'g', 'v', 'y', 'k', '-', 'H', 'M', 'T', '\'', 'B', 'x', 'I', 'W', 'L'
        -:   54:};
        -:   55:
        -:   56:static const int8_t chr_ids_by_chr[256] = {
        -:   57:  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, 23, 29, -1, -1, 31, 24, -1, -1, -1, -1, -1, -1, 25, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 15, 11, 14, 0, 17, 18, 5, 2, -1, 21, 9, 13, 6, 3, 16, -1, 7, 8, 4, 10, 19, 12, 28, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
        -:   58:};
        -:   59:
        -:   60:static const int8_t successor_ids_by_chr_id_and_chr_id[32][32] = {
        -:   61:  {7, 4, 12, -1, 6, -1, 1, 0, 3, 5, -1, 9, -1, 8, 2, -1, 15, 14, -1, 10, 11, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1},
        -:   62:  {-1, -1, 6, -1, 1, -1, 0, 3, 2, 4, 15, 11, -1, 9, 5, 10, 13, -1, 12, 8, 7, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   63:  {9, 11, -1, 4, 2, -1, 0, 8, 1, 5, -1, 6, -1, 3, 7, 15, -1, 12, 10, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   64:  {-1, -1, 14, 7, 5, -1, 1, 2, 8, 9, 0, 15, 6, 4, 11, -1, 12, 3, -1, 10, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   65:  {2, 4, 3, 1, 5, 0, -1, 6, 10, 9, 7, 12, 11, -1, -1, -1, -1, 13, -1, -1, 8, -1, 15, -1, -1, -1, 14, -1, -1, -1, -1, -1},
        -:   66:  {0, 1, 2, 3, 4, -1, -1, 5, 9, 10, 6, -1, -1, 8, 15, 11, -1, 14, -1, -1, 7, -1, 13, -1, -1, -1, 12, -1, -1, -1, -1, -1},
        -:   67:  {2, 8, 7, 4, 3, -1, 9, -1, 6, 11, -1, 5, -1, -1, 0, -1, -1, 14, 1, 15, 10, 12, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1},
        -:   68:  {0, 3, 1, 2, 6, -1, 9, 8, 4, 12, 13, 10, -1, 11, 7, -1, -1, 15, 14, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   69:  {0, 6, 3, 4, 1, 2, -1, -1, 5, 10, 7, 9, 11, 12, -1, -1, 8, 14, -1, -1, 15, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   70:  {0, 6, 2, 5, 9, -1, -1, -1, 10, 1, 8, -1, 12, 14, 4, -1, 15, 7, -1, 13, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   71:  {8, 10, 9, 15, 1, -1, 4, 0, 3, 2, -1, 6, -1, 12, 11, 13, 7, 14, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   72:  {1, 3, 6, 0, 4, 2, -1, 7, 13, 8, 9, 11, -1, -1, 15, -1, -1, -1, -1, -1, 10, 5, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   73:  {3, 0, 1, 4, -1, 2, 5, 6, 7, 8, -1, 14, -1, -1, 9, 15, -1, 12, -1, -1, -1, 10, 11, -1, -1, -1, 13, -1, -1, -1, -1, -1},
        -:   74:  {0, 1, 3, 2, 15, -1, 12, -1, 7, 14, 4, -1, -1, 9, -1, 8, 5, 10, -1, -1, 6, -1, 13, -1, -1, -1, 11, -1, -1, -1, -1, -1},
        -:   75:  {0, 3, 1, 2, -1, -1, 12, 6, 4, 9, 7, -1, -1, 14, 8, -1, -1, 15, 11, 13, 5, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   76:  {0, 5, 7, 2, 10, 13, -1, 6, 8, 1, 3, -1, -1, 14, 15, 11, -1, -1, -1, 12, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   77:  {0, 2, 6, 3, 7, 10, -1, 1, 9, 4, 8, -1, -1, 15, -1, 12, 5, -1, -1, -1, 11, -1, 13, -1, -1, -1, 14, -1, -1, -1, -1, -1},
        -:   78:  {1, 3, 4, 0, 7, -1, 12, 2, 11, 8, 6, 13, -1, -1, -1, -1, -1, 5, -1, -1, 10, 15, 9, -1, -1, -1, 14, -1, -1, -1, -1, -1},
        -:   79:  {1, 3, 5, 2, 13, 0, 9, 4, 7, 6, 8, -1, -1, 15, -1, 11, -1, -1, 10, -1, 14, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   80:  {0, 2, 1, 3, -1, -1, -1, 6, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   81:  {1, 11, 4, 0, 3, -1, 13, 12, 2, 7, -1, -1, 15, 10, 5, 8, 14, -1, -1, -1, -1, -1, 9, -1, -1, -1, 6, -1, -1, -1, -1, -1},
        -:   82:  {0, 9, 2, 14, 15, 4, 1, 13, 3, 5, -1, -1, 10, -1, -1, -1, -1, 6, 12, -1, 7, -1, 8, -1, -1, -1, 11, -1, -1, -1, -1, -1},
        -:   83:  {-1, 2, 14, -1, 1, 5, 8, 7, 4, 12, -1, 6, 9, 11, 13, 3, 10, 15, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   84:  {0, 1, 3, 2, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   85:  {4, 3, 1, 5, -1, -1, -1, 0, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   86:  {2, 8, 4, 1, -1, 0, -1, 6, -1, -1, 5, -1, 7, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   87:  {12, 5, -1, -1, 1, -1, -1, 7, 0, 3, -1, 2, -1, 4, 6, -1, -1, -1, -1, 8, -1, -1, 15, -1, 13, 9, -1, -1, -1, -1, -1, 11},
        -:   88:  {1, 3, 2, 4, -1, -1, -1, 5, -1, 7, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1},
        -:   89:  {5, 3, 4, 12, 1, 6, -1, -1, -1, -1, 8, 2, -1, -1, -1, -1, 0, 9, -1, -1, 11, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   90:  {-1, -1, -1, -1, 0, -1, 1, 12, 3, -1, -1, -1, -1, 5, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, 6, -1, 10},
        -:   91:  {2, 3, 1, 4, -1, 0, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1},
        -:   92:  {5, 1, 3, 0, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 9, -1, -1, 6, -1, 7}
        -:   93:};
        -:   94:
        -:   95:static const int8_t chrs_by_chr_and_successor_id[MAX_CHR - MIN_CHR][16] = {
        -:   96:  {'s', 't', 'c', 'l', 'm', 'a', 'd', 'r', 'v', 'T', 'A', 'L', 'e', 'M', 'Y', '-'},
        -:   97:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:   98:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:   99:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  100:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  101:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  102:  {'-', 't', 'a', 'b', 's', 'h', 'c', 'r', 'n', 'w', 'p', 'm', 'l', 'd', 'i', 'f'},
        -:  103:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  104:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  105:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  106:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  107:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  108:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  109:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  110:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  111:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  112:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  113:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  114:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  115:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  116:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  117:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  118:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  119:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  120:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  121:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  122:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  123:  {'u', 'e', 'i', 'a', 'o', 'r', 'y', 'l', 'I', 'E', 'R', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  124:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  125:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  126:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  127:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  128:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  129:  {'e', 'a', 'o', 'i', 'u', 'A', 'y', 'E', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  130:  {'t', 'n', 'f', 's', '\'', 'm', 'I', 'N', 'A', 'E', 'L', 'Z', 'r', 'V', 'R', 'C'},
        -:  131:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  132:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  133:  {'o', 'a', 'y', 'i', 'u', 'e', 'I', 'L', 'D', '\'', 'E', 'Y', '\x00', '\x00', '\x00', '\x00'},
        -:  134:  {'r', 'i', 'y', 'a', 'e', 'o', 'u', 'Y', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  135:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  136:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  137:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  138:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  139:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  140:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  141:  {'h', 'o', 'e', 'E', 'i', 'u', 'r', 'w', 'a', 'H', 'y', 'R', 'Z', '\x00', '\x00', '\x00'},
        -:  142:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  143:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  144:  {'h', 'i', 'e', 'a', 'o', 'r', 'I', 'y', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  145:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  146:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  147:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  148:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  149:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  150:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  151:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  152:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  153:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  154:  {'n', 't', 's', 'r', 'l', 'd', 'i', 'y', 'v', 'm', 'b', 'c', 'g', 'p', 'k', 'u'},
        -:  155:  {'e', 'l', 'o', 'u', 'y', 'a', 'r', 'i', 's', 'j', 't', 'b', 'v', 'h', 'm', 'd'},
        -:  156:  {'o', 'e', 'h', 'a', 't', 'k', 'i', 'r', 'l', 'u', 'y', 'c', 'q', 's', '-', 'd'},
        -:  157:  {'e', 'i', 'o', 'a', 's', 'y', 'r', 'u', 'd', 'l', '-', 'g', 'n', 'v', 'm', 'f'},
        -:  158:  {'r', 'n', 'd', 's', 'a', 'l', 't', 'e', 'm', 'c', 'v', 'y', 'i', 'x', 'f', 'p'},
        -:  159:  {'o', 'e', 'r', 'a', 'i', 'f', 'u', 't', 'l', '-', 'y', 's', 'n', 'c', '\'', 'k'},
        -:  160:  {'h', 'e', 'o', 'a', 'r', 'i', 'l', 's', 'u', 'n', 'g', 'b', '-', 't', 'y', 'm'},
        -:  161:  {'e', 'a', 'i', 'o', 't', 'r', 'u', 'y', 'm', 's', 'l', 'b', '\'', '-', 'f', 'd'},
        -:  162:  {'n', 's', 't', 'm', 'o', 'l', 'c', 'd', 'r', 'e', 'g', 'a', 'f', 'v', 'z', 'b'},
        -:  163:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  164:  {'e', 'n', 'i', 's', 'h', 'l', 'f', 'y', '-', 'a', 'w', '\'', 'g', 'r', 'o', 't'},
        -:  165:  {'e', 'l', 'i', 'y', 'd', 'o', 'a', 'f', 'u', 't', 's', 'k', 'w', 'v', 'm', 'p'},
        -:  166:  {'e', 'a', 'o', 'i', 'u', 'p', 'y', 's', 'b', 'm', 'f', '\'', 'n', '-', 'l', 't'},
        -:  167:  {'d', 'g', 'e', 't', 'o', 'c', 's', 'i', 'a', 'n', 'y', 'l', 'k', '\'', 'f', 'v'},
        -:  168:  {'u', 'n', 'r', 'f', 'm', 't', 'w', 'o', 's', 'l', 'v', 'd', 'p', 'k', 'i', 'c'},
        -:  169:  {'e', 'r', 'a', 'o', 'l', 'p', 'i', 't', 'u', 's', 'h', 'y', 'b', '-', '\'', 'm'},
        -:  170:  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  171:  {'e', 'i', 'o', 'a', 's', 'y', 't', 'd', 'r', 'n', 'c', 'm', 'l', 'u', 'g', 'f'},
        -:  172:  {'e', 't', 'h', 'i', 'o', 's', 'a', 'u', 'p', 'c', 'l', 'w', 'm', 'k', 'f', 'y'},
        -:  173:  {'h', 'o', 'e', 'i', 'a', 't', 'r', 'u', 'y', 'l', 's', 'w', 'c', 'f', '\'', '-'},
        -:  174:  {'r', 't', 'l', 's', 'n', 'g', 'c', 'p', 'e', 'i', 'a', 'd', 'm', 'b', 'f', 'o'},
        -:  175:  {'e', 'i', 'a', 'o', 'y', 'u', 'r', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
        -:  176:  {'a', 'i', 'h', 'e', 'o', 'n', 'r', 's', 'l', 'd', 'k', '-', 'f', '\'', 'c', 'b'},
        -:  177:  {'p', 't', 'c', 'a', 'i', 'e', 'h', 'q', 'u', 'f', '-', 'y', 'o', '\x00', '\x00', '\x00'},
        -:  178:  {'o', 'e', 's', 't', 'i', 'd', '\'', 'l', 'b', '-', 'm', 'a', 'r', 'n', 'p', 'w'}
        -:  179:};
        -:  180:
        -:  181:
        -:  182:typedef struct Pack {
        -:  183:  const uint32_t word;
        -:  184:  const unsigned int bytes_packed;
        -:  185:  const unsigned int bytes_unpacked;
        -:  186:  const unsigned int offsets[8];
        -:  187:  const int16_t _ALIGNED masks[8];
        -:  188:  const char header_mask;
        -:  189:  const char header;
        -:  190:} Pack;
        -:  191:
        -:  192:#define PACK_COUNT 3
        -:  193:#define MAX_SUCCESSOR_N 7
        -:  194:
        -:  195:static const Pack packs[PACK_COUNT] = {
        -:  196:  { 0x80000000, 1, 2, { 26, 24, 24, 24, 24, 24, 24, 24 }, { 15, 3, 0, 0, 0, 0, 0, 0 }, 0xc0, 0x80 },
        -:  197:  { 0xc0000000, 2, 4, { 25, 22, 19, 16, 16, 16, 16, 16 }, { 15, 7, 7, 7, 0, 0, 0, 0 }, 0xe0, 0xc0 },
        -:  198:  { 0xe0000000, 4, 8, { 23, 19, 15, 11, 8, 5, 2, 0 }, { 31, 15, 15, 15, 7, 7, 7, 3 }, 0xf0, 0xe0 }
        -:  199:};
        -:  200:
      114:  201:static inline int decode_header(unsigned char val) {
      114:  202:  int i = -1;
      160:  203:  while ((signed char)val < 0) {
       46:  204:    val <<= 1;
       46:  205:    ++i;
        -:  206:  }
      114:  207:  return i;
        -:  208:}
        -:  209:
        -:  210:union Code {
        -:  211:  uint32_t word;
        -:  212:  char bytes[4];
        -:  213:};
        -:  214:
       91:  215:static inline int check_indices(const int16_t * shoco_restrict indices, int pack_n) {
      242:  216:  for (unsigned int i = 0; i < packs[pack_n].bytes_unpacked; ++i)
      208:  217:    if (indices[i] > packs[pack_n].masks[i])
       57:  218:      return 0;
       34:  219:  return 1;
        -:  220:}
        -:  221:
       63:  222:static inline int find_best_encoding(const int16_t * shoco_restrict indices, unsigned int n_consecutive) {
      208:  223:  for (int p = PACK_COUNT - 1; p >= 0; --p)
      179:  224:    if ((n_consecutive >= packs[p].bytes_unpacked) && (check_indices(indices, p)))
       34:  225:      return p;
       29:  226:  return -1;
        -:  227:}
        -:  228:
       16:  229:size_t shoco_compress(const char * const shoco_restrict original, size_t strlen, char * const shoco_restrict out, size_t bufsize) {
       16:  230:  char *o = out;
       16:  231:  char * const out_end = out + bufsize;
       16:  232:  const char *in = original;
       16:  233:  int16_t _ALIGNED indices[MAX_SUCCESSOR_N + 1] = { 0 };
        -:  234:  int last_chr_index;
        -:  235:  int current_index;
        -:  236:  int successor_index;
        -:  237:  unsigned int n_consecutive;
        -:  238:  union Code code;
        -:  239:  int pack_n;
        -:  240:  unsigned int rest;
       16:  241:  const char * const in_end = original + strlen;
        -:  242:
      134:  243:  while ((*in != '\0')) {
      124:  244:    if (strlen && (in == in_end))
        3:  245:      break;
        -:  246:
        -:  247:    // find the longest string of known successors
      121:  248:    indices[0] = chr_ids_by_chr[(unsigned char)in[0]];
      121:  249:    last_chr_index = indices[0];
      121:  250:    if (last_chr_index < 0)
       35:  251:      goto last_resort;
        -:  252:
       86:  253:    rest = in_end - in;
      267:  254:    for (n_consecutive = 1; n_consecutive <= MAX_SUCCESSOR_N; ++n_consecutive) {
      265:  255:      if (strlen && (n_consecutive == rest))
        4:  256:        break;
        -:  257:
      261:  258:      current_index = chr_ids_by_chr[(unsigned char)in[n_consecutive]];
      261:  259:      if (current_index < 0)  // '\0' is always -1
       78:  260:        break;
        -:  261:
      183:  262:      successor_index = successor_ids_by_chr_id_and_chr_id[last_chr_index][current_index];
      183:  263:      if (successor_index < 0)
        2:  264:        break;
        -:  265:
      181:  266:      indices[n_consecutive] = (int16_t)successor_index;
      181:  267:      last_chr_index = current_index;
        -:  268:    }
       86:  269:    if (n_consecutive < 2)
       23:  270:      goto last_resort;
        -:  271:
       63:  272:    pack_n = find_best_encoding(indices, n_consecutive);
       63:  273:    if (pack_n >= 0) {
       34:  274:      if (o + packs[pack_n].bytes_packed > out_end)
        1:  275:        return bufsize + 1;
        -:  276:
       33:  277:      code.word = packs[pack_n].word;
      119:  278:      for (unsigned int i = 0; i < packs[pack_n].bytes_unpacked; ++i)
       86:  279:        code.word |= indices[i] << packs[pack_n].offsets[i];
        -:  280:
        -:  281:      // In the little-endian world, we need to swap what's
        -:  282:      // in the register to match the memory representation.
        -:  283:      // On big-endian systems, this is a dummy.
       33:  284:      code.word = swap(code.word);
        -:  285:
        -:  286:      // if we'd just copy the word, we might write over the end
        -:  287:      // of the output string
       76:  288:      for (unsigned int i = 0; i < packs[pack_n].bytes_packed; ++i)
       43:  289:        o[i] = code.bytes[i];
        -:  290:
       33:  291:      o += packs[pack_n].bytes_packed;
       33:  292:      in += packs[pack_n].bytes_unpacked;
        -:  293:    } else {
       29:  294:last_resort:
       87:  295:      if (*in & 0x80) {
        -:  296:        // non-ascii case
        9:  297:        if (o + 2 > out_end)
        1:  298:          return bufsize + 1;
        -:  299:        // put in a sentinel byte
        8:  300:        *o++ = 0x00;
        -:  301:      } else {
        -:  302:        // an ascii byte
       78:  303:        if (o + 1 > out_end)
        1:  304:          return bufsize + 1;
        -:  305:      }
       85:  306:      *o++ = *in++;
        -:  307:    }
        -:  308:  }
        -:  309:
       13:  310:  return o - out;
        -:  311:}
        -:  312:
        8:  313:size_t shoco_decompress(const char * const shoco_restrict original, size_t complen, char * const shoco_restrict out, size_t bufsize) {
        8:  314:  char *o = out;
        8:  315:  char * const out_end = out + bufsize;
        8:  316:  const char *in = original;
        -:  317:  char last_chr;
        8:  318:  union Code code = { 0 };
        -:  319:  int offset;
        -:  320:  int mask;
        -:  321:  int mark;
        8:  322:  const char * const in_end = original + complen;
        -:  323:
      118:  324:  while (in < in_end) {
      114:  325:    mark = decode_header(*in);
      114:  326:    if (mark < 0) {
       79:  327:      if (o >= out_end)
        1:  328:        return bufsize + 1;
        -:  329:
        -:  330:      // ignore the sentinel value for non-ascii chars
       78:  331:      if (*in == 0x00) {
        9:  332:        if (++in >= in_end)
        1:  333:          return SIZE_MAX;
        -:  334:      }
        -:  335:
       77:  336:      *o++ = *in++;
        -:  337:    } else {
       35:  338:      if (o + packs[mark].bytes_unpacked > out_end)
        1:  339:        return bufsize + 1;
       34:  340:      else if (in + packs[mark].bytes_packed > in_end)
        1:  341:        return SIZE_MAX;
        -:  342:
        -:  343:      // This should be OK as well, but it fails with emscripten.
        -:  344:      // Test this with new versions of emcc.
        -:  345:      //code.word = swap(*(uint32_t *)in);
       75:  346:      for (unsigned int i = 0; i < packs[mark].bytes_packed; ++i)
       42:  347:        code.bytes[i] = in[i];
       33:  348:      code.word = swap(code.word);
        -:  349:
        -:  350:      // unpack the leading char
       33:  351:      offset = packs[mark].offsets[0];
       33:  352:      mask = packs[mark].masks[0];
       33:  353:      last_chr = o[0] = chrs_by_chr_id[(code.word >> offset) & mask];
        -:  354:
        -:  355:      // unpack the successor chars
       84:  356:      for (unsigned int i = 1; i < packs[mark].bytes_unpacked; ++i) {
       51:  357:        offset = packs[mark].offsets[i];
       51:  358:        mask = packs[mark].masks[i];
       51:  359:        last_chr = o[i] = chrs_by_chr_and_successor_id[(unsigned char)last_chr - MIN_CHR][(code.word >> offset) & mask];
        -:  360:      }
        -:  361:
       33:  362:      o += packs[mark].bytes_unpacked;
       33:  363:      in += packs[mark].bytes_packed;
        -:  364:    }
        -:  365:  }
        -:  366:
        -:  367:  // append a 0-terminator if it fits
        4:  368:  if (o < out_end)
        3:  369:    *o = '\0';
        -:  370:
        4:  371:  return o - out;
        -:  372:}
        -:  373:///// shoco END
        -:  374:
        -:  375:static const char LARGE_STR[] = "This is a large string that won't possibly fit into a small buffer";
        -:  376:static const char NON_ASCII_STR[] = "Übergrößenträger";
        -:  377:
        1:  378:int main() {
        -:  379:  char buf_1[1];
        -:  380:  char buf_2[2];
        -:  381:  char buf_4[4];
        -:  382:  char buf_large[4096];
        -:  383:  size_t ret;
        -:  384:
        -:  385:  // test compression
        1:  386:  ret = shoco_compress(LARGE_STR, 0, buf_2, 2);
       1*:  387:  assert(ret == 3); // bufsize + 1 if buffer too small
        -:  388:
        1:  389:  ret = shoco_compress(LARGE_STR, 0, buf_large, 4096);
       1*:  390:  assert(ret <= strlen(LARGE_STR));
        -:  391:
        1:  392:  ret = shoco_compress("a", 0, buf_1, 1);
       1*:  393:  assert(ret == 1); // bufsize if null byte didn't fit
        -:  394:
        1:  395:  buf_2[1] = 'x';
        1:  396:  ret = shoco_compress("a", 0, buf_2, 2);
       1*:  397:  assert(ret == 1); // compressed string length without null byte
       1*:  398:  assert(buf_2[1] == 'x'); // Canary is still alive
        -:  399:
        1:  400:  ret = shoco_compress("a", 0, buf_4, 4);
       1*:  401:  assert(ret == 1);
        -:  402:
        1:  403:  ret = shoco_compress("test", 0, buf_4, 4);
       1*:  404:  assert(ret <= 4);
        -:  405:
        1:  406:  buf_4[1] = 'x';
        1:  407:  ret = shoco_compress("test", 1, buf_4, 4); // buffer large enough, but strlen said "just compress first char"
       1*:  408:  assert(ret == 1);
       1*:  409:  assert(buf_4[1] == 'x');
        -:  410:
        1:  411:  ret = shoco_compress("t\x80", 1, buf_4, 4);
       1*:  412:  assert(ret == 1);
       1*:  413:  assert(buf_4[1] == 'x');
        -:  414:
        1:  415:  buf_4[1] = 'y';
        1:  416:  ret = shoco_compress("test", 1, buf_4, 1);
       1*:  417:  assert(ret == 1);
       1*:  418:  assert(buf_4[1] == 'y'); // no null byte written
        -:  419:
        1:  420:  buf_4[1] = 'z';
        1:  421:  ret = shoco_compress("a", 1, buf_4, 4);
       1*:  422:  assert(ret == 1);
       1*:  423:  assert(buf_4[1] == 'z');
        -:  424:
        1:  425:  buf_4[1] = 'b';
        1:  426:  ret = shoco_compress("a", 2, buf_4, 4);
       1*:  427:  assert(ret == 1);
       1*:  428:  assert(buf_4[1] == 'b');
        -:  429:
        1:  430:  ret = shoco_compress("ä", 0, buf_1, 1); // this assumes that 'ä' is not in the frequent chars table
       1*:  431:  assert(ret == 2);
        -:  432:
        -:  433:  // Working test case -> 98.15% to 99.39%
        1:  434:  ret = shoco_compress("abca", 0, buf_2, 2);
       1*:  435:  assert(ret == 3);
        -:  436:
        -:  437:  
        -:  438:  //test decompression
        -:  439:  char compressed_large[4096];
        1:  440:  int large_len = strlen(LARGE_STR);
        -:  441:  int comp_len;
        1:  442:  comp_len = shoco_compress(LARGE_STR, 0, compressed_large, 4096);
        -:  443:
        1:  444:  buf_large[large_len] = 'x';
        1:  445:  ret = shoco_decompress(compressed_large, comp_len, buf_large, 4096);
       1*:  446:  assert(ret == large_len);
       1*:  447:  assert(strcmp(buf_large, LARGE_STR) == 0);
       1*:  448:  assert(buf_large[large_len] == '\0'); // null byte written
        -:  449:  
        1:  450:  ret = shoco_decompress(compressed_large, comp_len, buf_2, 2);
       1*:  451:  assert(ret == 3); // ret = bufsize + 1, because buffer too small
        -:  452:
        1:  453:  buf_large[large_len] = 'x';
        1:  454:  ret = shoco_decompress(compressed_large, comp_len, buf_large, large_len);
       1*:  455:  assert(ret == large_len);
       1*:  456:  assert(buf_large[large_len] != '\0'); // no null byte written
        -:  457:
        1:  458:  ret = shoco_decompress(compressed_large, 5, buf_large, 4096);
       1*:  459:  assert((ret < large_len) || (ret == 4097)); // either fail (bufsize + 1) or it happened to work
        -:  460:
        -:  461:
        -:  462:  char compressed_non_ascii[256];
        1:  463:  int non_ascii_len = strlen(NON_ASCII_STR);
        1:  464:  comp_len = shoco_compress(NON_ASCII_STR, 0, compressed_non_ascii, 256);
        -:  465:
        1:  466:  buf_large[non_ascii_len] = 'x';
        1:  467:  ret = shoco_decompress(compressed_non_ascii, comp_len, buf_large, 4096);
       1*:  468:  assert(ret == non_ascii_len);
       1*:  469:  assert(strcmp(buf_large, NON_ASCII_STR) == 0);
       1*:  470:  assert(buf_large[non_ascii_len] == '\0'); // null byte written
        -:  471:
        1:  472:  ret = shoco_decompress("\x00", 1, buf_large, 4096);
       1*:  473:  assert(ret == SIZE_MAX);
        -:  474:
        1:  475:  ret = shoco_decompress("\xe0""ab", 3, buf_large, 4096);
       1*:  476:  assert(ret == SIZE_MAX);
        -:  477:
        -:  478:  // woring test case -> 99.39% to 100.00%
        -:  479:  char comp[2];
        1:  480:  char str[] = "AA";
        1:  481:  int com_len = shoco_compress(str, 0, comp, 2);
        1:  482:  ret = shoco_decompress(comp, com_len, buf_1, 1);
       1*:  483:  assert(ret == 2);
        -:  484:
        1:  485:  puts("All tests passed.");
        1:  486:  return 0;
        -:  487:}
